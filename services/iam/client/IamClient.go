// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/iam/apis"
    "encoding/json"
    "errors"
)

type IamClient struct {
    JDCloudClient
}

func NewIamClient(credential *Credential) *IamClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("iam.jdcloud-api.com")

    return &IamClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "iam",
            Revision:    "0.1.0",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *IamClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *IamClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 为子用户绑定策略 */
func (c *IamClient) AddPermissionsToSubUser(request *AddPermissionsToSubUserRequest) (*AddPermissionsToSubUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &AddPermissionsToSubUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 修改策略 */
func (c *IamClient) UpdatePermission(request *UpdatePermissionRequest) (*UpdatePermissionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &UpdatePermissionResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建策略 */
func (c *IamClient) CreatePermission(request *CreatePermissionRequest) (*CreatePermissionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreatePermissionResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 启用AccessKey */
func (c *IamClient) EnabledUserAccessKey(request *EnabledUserAccessKeyRequest) (*EnabledUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &EnabledUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建AccessKey */
func (c *IamClient) CreateUserAccessKey(request *CreateUserAccessKeyRequest) (*CreateUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询策略列表 */
func (c *IamClient) DescribePermissions(request *DescribePermissionsRequest) (*DescribePermissionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribePermissionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询策略详情 */
func (c *IamClient) DescribePermissionDetail(request *DescribePermissionDetailRequest) (*DescribePermissionDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribePermissionDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建子账号 */
func (c *IamClient) CreateSubuser(request *CreateSubuserRequest) (*CreateSubuserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateSubuserResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 为子用户解绑策略 */
func (c *IamClient) RemovePermissionOfSubUser(request *RemovePermissionOfSubUserRequest) (*RemovePermissionOfSubUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &RemovePermissionOfSubUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 禁用AccessKey */
func (c *IamClient) DisabledUserAccessKey(request *DisabledUserAccessKeyRequest) (*DisabledUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DisabledUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询子用户策略列表 */
func (c *IamClient) DescribeSubUserPermissions(request *DescribeSubUserPermissionsRequest) (*DescribeSubUserPermissionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeSubUserPermissionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除AccessKey */
func (c *IamClient) DeleteUserAccessKey(request *DeleteUserAccessKeyRequest) (*DeleteUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询AccessKey列表 */
func (c *IamClient) DescribeUserAccessKeys(request *DescribeUserAccessKeysRequest) (*DescribeUserAccessKeysResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeUserAccessKeysResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}


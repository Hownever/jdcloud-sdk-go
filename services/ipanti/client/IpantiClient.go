// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/ipanti/apis"
    "encoding/json"
    "errors"
)

type IpantiClient struct {
    JDCloudClient
}

func NewIpantiClient(credential *Credential) *IpantiClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("ipanti.jdcloud-api.com")

    return &IpantiClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "ipanti",
            Revision:    "0.2.0",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *IpantiClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *IpantiClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 删除某条网站规则 */
func (c *IpantiClient) DeleteWebRule(request *DeleteWebRuleRequest) (*DeleteWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 设置实例url白名单 */
func (c *IpantiClient) ModifyInstanceUrlWhiteList(request *ModifyInstanceUrlWhiteListRequest) (*ModifyInstanceUrlWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceUrlWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建实例 */
func (c *IpantiClient) CreateInstance(request *CreateInstanceRequest) (*CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 添加网站类规则 */
func (c *IpantiClient) CreateWebRule(request *CreateWebRuleRequest) (*CreateWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 关闭实例CC防护 */
func (c *IpantiClient) DisableInstanceCC(request *DisableInstanceCCRequest) (*DisableInstanceCCResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DisableInstanceCCResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询某条网站类规则 */
func (c *IpantiClient) DescribeWebRule(request *DescribeWebRuleRequest) (*DescribeWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询某条非网站类规则 */
func (c *IpantiClient) DescribeForwardRule(request *DescribeForwardRuleRequest) (*DescribeForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 修改实例名称 */
func (c *IpantiClient) ModifyInstanceName(request *ModifyInstanceNameRequest) (*ModifyInstanceNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 添加非网站类规则 */
func (c *IpantiClient) CreateForwardRule(request *CreateForwardRuleRequest) (*CreateForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 设置实例ip白名单 */
func (c *IpantiClient) ModifyInstanceIpWhiteList(request *ModifyInstanceIpWhiteListRequest) (*ModifyInstanceIpWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceIpWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 设置实例ip黑名单 */
func (c *IpantiClient) ModifyInstanceIpBlackList(request *ModifyInstanceIpBlackListRequest) (*ModifyInstanceIpBlackListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceIpBlackListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 启用实例url白名单 */
func (c *IpantiClient) EnableInstanceUrlWhiteList(request *EnableInstanceUrlWhiteListRequest) (*EnableInstanceUrlWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &EnableInstanceUrlWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 禁用实例ip白名单 */
func (c *IpantiClient) DisableInstanceIpWhiteList(request *DisableInstanceIpWhiteListRequest) (*DisableInstanceIpWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DisableInstanceIpWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询实例 */
func (c *IpantiClient) DescribeInstance(request *DescribeInstanceRequest) (*DescribeInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 禁用实例url白名单 */
func (c *IpantiClient) DisableInstanceUrlWhiteList(request *DisableInstanceUrlWhiteListRequest) (*DisableInstanceUrlWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DisableInstanceUrlWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 启用实例ip白名单 */
func (c *IpantiClient) EnableInstanceIpWhiteList(request *EnableInstanceIpWhiteListRequest) (*EnableInstanceIpWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &EnableInstanceIpWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 设置实例CC防护 */
func (c *IpantiClient) ModifyInstanceCC(request *ModifyInstanceCCRequest) (*ModifyInstanceCCResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceCCResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询某个实例下的非网站转发配置 */
func (c *IpantiClient) DescribeForwardRules(request *DescribeForwardRulesRequest) (*DescribeForwardRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeForwardRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除某条非网站规则 */
func (c *IpantiClient) DeleteForwardRule(request *DeleteForwardRuleRequest) (*DeleteForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 更新某条网站类规则 */
func (c *IpantiClient) ModifyWebRule(request *ModifyWebRuleRequest) (*ModifyWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询某个实例下的网站类规则 */
func (c *IpantiClient) DescribeWebRules(request *DescribeWebRulesRequest) (*DescribeWebRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeWebRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 启用实例ip黑名单 */
func (c *IpantiClient) EnableInstanceIpBlackList(request *EnableInstanceIpBlackListRequest) (*EnableInstanceIpBlackListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &EnableInstanceIpBlackListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询实例列表 */
func (c *IpantiClient) DescribeInstances(request *DescribeInstancesRequest) (*DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 开启实例CC防护 */
func (c *IpantiClient) EnableInstanceCC(request *EnableInstanceCCRequest) (*EnableInstanceCCResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &EnableInstanceCCResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 禁用实例ip黑名单 */
func (c *IpantiClient) DisableInstanceIpBlackList(request *DisableInstanceIpBlackListRequest) (*DisableInstanceIpBlackListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DisableInstanceIpBlackListResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 更新某条非网站类规则 */
func (c *IpantiClient) ModifyForwardRule(request *ModifyForwardRuleRequest) (*ModifyForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}


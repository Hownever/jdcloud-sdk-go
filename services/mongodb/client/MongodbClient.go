// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/mongodb/apis"
    "encoding/json"
    "errors"
)

type MongodbClient struct {
    JDCloudClient
}

func NewMongodbClient(credential *Credential) *MongodbClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("mongodb.jdcloud-api.com")

    return &MongodbClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "mongodb",
            Revision:    "1.0.0",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *MongodbClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *MongodbClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 查看备份 */
func (c *MongodbClient) DescribeBackups(request *DescribeBackupsRequest) (*DescribeBackupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeBackupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询实例信息 */
func (c *MongodbClient) DescribeInstances(request *DescribeInstancesRequest) (*DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 变更实例规格 */
func (c *MongodbClient) ModifyInstanceSpec(request *ModifyInstanceSpecRequest) (*ModifyInstanceSpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceSpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 修改实例名称 */
func (c *MongodbClient) ModifyInstanceName(request *ModifyInstanceNameRequest) (*ModifyInstanceNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyInstanceNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建备份 */
func (c *MongodbClient) CreateBackup(request *CreateBackupRequest) (*CreateBackupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateBackupResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 修改备份策略 */
func (c *MongodbClient) ModifyBackupPolicy(request *ModifyBackupPolicyRequest) (*ModifyBackupPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyBackupPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建实例 */
func (c *MongodbClient) CreateInstance(request *CreateInstanceRequest) (*CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除备份 */
func (c *MongodbClient) DeleteBackup(request *DeleteBackupRequest) (*DeleteBackupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteBackupResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 数据恢复 */
func (c *MongodbClient) RestoreInstance(request *RestoreInstanceRequest) (*RestoreInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &RestoreInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 重置密码 */
func (c *MongodbClient) ResetPassword(request *ResetPasswordRequest) (*ResetPasswordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ResetPasswordResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 获取备份策略 */
func (c *MongodbClient) DescribeBackupPolicy(request *DescribeBackupPolicyRequest) (*DescribeBackupPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeBackupPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除实例 */
func (c *MongodbClient) DeleteInstance(request *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 获取备份下载链接 */
func (c *MongodbClient) BackupDownloadURL(request *BackupDownloadURLRequest) (*BackupDownloadURLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &BackupDownloadURLResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}


// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/nc/apis"
    "encoding/json"
    "errors"
)

type NcClient struct {
    JDCloudClient
}

func NewNcClient(credential *Credential) *NcClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("nc.jdcloud-api.com")

    return &NcClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "nc",
            Revision:    "0.2.0",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *NcClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *NcClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 查询容器列表 */
func (c *NcClient) DescribeContainers(request *DescribeContainersRequest) (*DescribeContainersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeContainersResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建一台或多台指定配置的实例 */
func (c *NcClient) CreateContainers(request *CreateContainersRequest) (*CreateContainersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateContainersResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询容器日志 */
func (c *NcClient) GetLogs(request *GetLogsRequest) (*GetLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &GetLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询 secret 详情 */
func (c *NcClient) DescribeSecret(request *DescribeSecretRequest) (*DescribeSecretResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeSecretResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 修改容器属性 */
func (c *NcClient) ModifyContainerAttribute(request *ModifyContainerAttributeRequest) (*ModifyContainerAttributeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyContainerAttributeResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除单个实例 */
func (c *NcClient) DeleteContainer(request *DeleteContainerRequest) (*DeleteContainerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteContainerResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 停止单个实例 */
func (c *NcClient) StopContainer(request *StopContainerRequest) (*StopContainerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &StopContainerResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 启动单个实例 */
func (c *NcClient) StartContainer(request *StartContainerRequest) (*StartContainerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &StartContainerResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 云容器解绑公网IP 解绑的是主网卡、主内网IP对应的弹性IP */
func (c *NcClient) DisassociateElasticIp(request *DisassociateElasticIpRequest) (*DisassociateElasticIpResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DisassociateElasticIpResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询secret列表 */
func (c *NcClient) DescribeSecrets(request *DescribeSecretsRequest) (*DescribeSecretsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeSecretsResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询资源的配额 */
func (c *NcClient) DescribeQuota(request *DescribeQuotaRequest) (*DescribeQuotaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeQuotaResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询容器详情 */
func (c *NcClient) DescribeContainer(request *DescribeContainerRequest) (*DescribeContainerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeContainerResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除 secret */
func (c *NcClient) DeleteSecret(request *DeleteSecretRequest) (*DeleteSecretResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteSecretResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建 secret */
func (c *NcClient) CreateSecret(request *CreateSecretRequest) (*CreateSecretResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateSecretResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 云容器绑定公网IP 绑定的是主网卡、主内网IP对应的弹性IP */
func (c *NcClient) AssociateElasticIp(request *AssociateElasticIpRequest) (*AssociateElasticIpResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &AssociateElasticIpResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}


// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/rds/apis"
    "encoding/json"
    "errors"
)

type RdsClient struct {
    JDCloudClient
}

func NewRdsClient(credential *Credential) *RdsClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("rds.jdcloud-api.com")

    return &RdsClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "rds",
            Revision:    "0.2.3",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *RdsClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *RdsClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 创建数据库账户 */
func (c *RdsClient) CreateAccount(request *CreateAccountRequest) (*CreateAccountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateAccountResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 数据库账号授权 */
func (c *RdsClient) GrantPrivilege(request *GrantPrivilegeRequest) (*GrantPrivilegeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &GrantPrivilegeResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建数据库 */
func (c *RdsClient) CreateDatabase(request *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 获取单库上云文件列表 */
func (c *RdsClient) DescribeImportFiles(request *DescribeImportFilesRequest) (*DescribeImportFilesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeImportFilesResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建备份 */
func (c *RdsClient) CreateBackup(request *CreateBackupRequest) (*CreateBackupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateBackupResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 获取备份信息 */
func (c *RdsClient) DescribeBackups(request *DescribeBackupsRequest) (*DescribeBackupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeBackupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 从用户上传的备份文件中恢复SQL Server数据库 */
func (c *RdsClient) RestoreDatabaseFromFile(request *RestoreDatabaseFromFileRequest) (*RestoreDatabaseFromFileResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &RestoreDatabaseFromFileResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除数据库 */
func (c *RdsClient) DeleteDatabase(request *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 数据库账号重置密码 */
func (c *RdsClient) ResetPassword(request *ResetPasswordRequest) (*ResetPasswordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ResetPasswordResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除数据库账户 */
func (c *RdsClient) DeleteAccount(request *DeleteAccountRequest) (*DeleteAccountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteAccountResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 从云数据库SQL Server备份中恢复单个数据库 */
func (c *RdsClient) RestoreDatabaseFromBackup(request *RestoreDatabaseFromBackupRequest) (*RestoreDatabaseFromBackupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &RestoreDatabaseFromBackupResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 获取备份下载链接 */
func (c *RdsClient) DescribeBackupDownloadURL(request *DescribeBackupDownloadURLRequest) (*DescribeBackupDownloadURLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeBackupDownloadURLResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}


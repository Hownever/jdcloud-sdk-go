// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/redis/apis"
    "encoding/json"
    "errors"
)

type RedisClient struct {
    JDCloudClient
}

func NewRedisClient(credential *Credential) *RedisClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("redis.jdcloud-api.com")

    return &RedisClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "redis",
            Revision:    "1.0.0",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *RedisClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *RedisClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 查询缓存Redis实例详情 */
func (c *RedisClient) DescribeCacheInstance(request *DescribeCacheInstanceRequest) (*DescribeCacheInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeCacheInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询缓存Redis实例列表 */
func (c *RedisClient) DescribeCacheInstances(request *DescribeCacheInstancesRequest) (*DescribeCacheInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeCacheInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询某区域下的实例规格列表 */
func (c *RedisClient) DescribeInstanceClass(request *DescribeInstanceClassRequest) (*DescribeInstanceClassResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeInstanceClassResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 修改缓存Redis实例的资源名称、描述，二者至少选一 */
func (c *RedisClient) ModifyCacheInstanceAttribute(request *ModifyCacheInstanceAttributeRequest) (*ModifyCacheInstanceAttributeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyCacheInstanceAttributeResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询账户配额信息 */
func (c *RedisClient) DescribeUserQuota(request *DescribeUserQuotaRequest) (*DescribeUserQuotaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DescribeUserQuotaResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 重置缓存Redis实例密码 */
func (c *RedisClient) ResetCacheInstancePassword(request *ResetCacheInstancePasswordRequest) (*ResetCacheInstancePasswordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ResetCacheInstancePasswordResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除单个缓存Redis实例 */
func (c *RedisClient) DeleteCacheInstance(request *DeleteCacheInstanceRequest) (*DeleteCacheInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteCacheInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建一个指定配置的缓存Redis实例 */
func (c *RedisClient) CreateCacheInstance(request *CreateCacheInstanceRequest) (*CreateCacheInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateCacheInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 变更缓存Redis实例配置 */
func (c *RedisClient) ModifyCacheInstanceClass(request *ModifyCacheInstanceClassRequest) (*ModifyCacheInstanceClassResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ModifyCacheInstanceClassResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

